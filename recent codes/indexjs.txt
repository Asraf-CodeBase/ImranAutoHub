// Configuration
        const API_URL = 'http://localhost:5000/api';
        const SOCKET_URL = 'http://localhost:5000';
        let socket;
        let currentUser = null;
        let currentVehicleId = null;

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            checkAuth();
            loadVehicles();
            initializeEventListeners();
            initializeSocket();
        });

        // Socket.IO initialization
        function initializeSocket() {
            socket = io(SOCKET_URL);
            
            socket.on('connect', () => {
                console.log('Socket connected');
            });

            socket.on('newVehicle', (vehicle) => {
                loadVehicles();
            });

            socket.on('newBid', (data) => {
                if (currentVehicleId === data.vehicleId) {
                    loadVehicleBids(data.vehicleId);
                }
            });

            socket.on('bookingConfirmed', (data) => {
                loadVehicles();
                if (currentUser) {
                    loadDashboard();
                }
            });
        }

        // Event Listeners
        function initializeEventListeners() {
            // Register Form
            document.getElementById('registerForm').addEventListener('submit', handleRegister);
            
            // Login Form
            document.getElementById('loginForm').addEventListener('submit', handleLogin);
            
            // Sell Vehicle Form
            document.getElementById('sellVehicleForm').addEventListener('submit', handleSellVehicle);
            
            // Search Form
            document.getElementById('searchForm').addEventListener('submit', handleSearch);
            
            // Password Strength
            document.getElementById('regPassword').addEventListener('input', checkPasswordStrength);
            
            // Navbar Scroll Effect
            window.addEventListener('scroll', () => {
                const navbar = document.getElementById('navbar');
                if (window.scrollY > 50) {
                    navbar.classList.add('scrolled');
                } else {
                    navbar.classList.remove('scrolled');
                }
            });
        }

        // Authentication
        function checkAuth() {
            const token = localStorage.getItem('token');
            const user = localStorage.getItem('user');
            
            if (token && user) {
                currentUser = JSON.parse(user);
                updateAuthUI(true);
            } else {
                updateAuthUI(false);
            }
        }

        function updateAuthUI(isAuthenticated) {
            const authButtons = document.getElementById('authButtons');
            const userMenu = document.getElementById('userMenu');
            
            if (isAuthenticated) {
                authButtons.classList.add('hidden');
                userMenu.classList.remove('hidden');
            } else {
                authButtons.classList.remove('hidden');
                userMenu.classList.add('hidden');
            }
        }

        async function handleRegister(e) {
            e.preventDefault();
            
            const name = document.getElementById('regName').value;
            const email = document.getElementById('regEmail').value;
            const phone = document.getElementById('regPhone').value;
            const password = document.getElementById('regPassword').value;
            const confirmPassword = document.getElementById('regConfirmPassword').value;
            
            // Validation
            if (password !== confirmPassword) {
                showError('registerError', 'Passwords do not match');
                return;
            }
            
            if (password.length < 8) {
                showError('registerError', 'Password must be at least 8 characters');
                return;
            }
            
            try {
                const response = await fetch(`${API_URL}/register`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ name, email, phone, password })
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    showSuccess('registerSuccess', 'Registration successful! Please login.');
                    setTimeout(() => showLogin(), 2000);
                } else {
                    showError('registerError', data.message);
                }
            } catch (error) {
                showError('registerError', 'Registration failed. Please try again.');
            }
        }

        async function handleLogin(e) {
            e.preventDefault();
            
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            
            try {
                const response = await fetch(`${API_URL}/login`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ email, password })
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    localStorage.setItem('token', data.token);
                    localStorage.setItem('user', JSON.stringify(data.user));
                    currentUser = data.user;
                    updateAuthUI(true);
                    showHome();
                } else {
                    showError('loginError', data.message);
                }
            } catch (error) {
                showError('loginError', 'Login failed. Please try again.');
            }
        }

        function logout() {
            localStorage.removeItem('token');
            localStorage.removeItem('user');
            currentUser = null;
            updateAuthUI(false);
            showHome();
        }

        // Vehicle Operations
        async function loadVehicles(filters = {}) {
            try {
                const params = new URLSearchParams(filters);
                const response = await fetch(`${API_URL}/vehicles?${params}`);
                const vehicles = await response.json();
                
                displayVehicles(vehicles);
            } catch (error) {
                console.error('Error loading vehicles:', error);
            }
        }

        function displayVehicles(vehicles) {
            const grid = document.getElementById('vehicleGrid');
            
            if (vehicles.length === 0) {
                grid.innerHTML = '<p style="text-align: center; grid-column: 1 / -1; color: var(--text-light);">No vehicles found</p>';
                return;
            }
            
            grid.innerHTML = vehicles.map(vehicle => `
                <div class="vehicle-card" onclick="showVehicleDetails('${vehicle._id}')">
                    <div class="vehicle-image-container">
                        <img src="${API_URL.replace('/api', '')}${vehicle.image}" alt="${vehicle.brand} ${vehicle.model}" class="vehicle-image" onerror="this.src='https://via.placeholder.com/400x300?text=No+Image'">
                        <div class="vehicle-badge">${vehicle.condition}</div>
                    </div>
                    <div class="vehicle-info">
                        <h3 class="vehicle-title">${vehicle.brand} ${vehicle.model}</h3>
                        <div class="vehicle-price">${vehicle.price.toLocaleString()}</div>
                        <div class="vehicle-details">
                            <div class="vehicle-detail">
                                <i class="fas fa-calendar"></i>
                                <span>${vehicle.year}</span>
                            </div>
                            <div class="vehicle-detail">
                                <i class="fas fa-car"></i>
                                <span>${vehicle.type}</span>
                            </div>
                            <div class="vehicle-detail">
                                <i class="fas fa-road"></i>
                                <span>${vehicle.mileage.toLocaleString()} mi</span>
                            </div>
                        </div>
                        <div class="vehicle-actions">
                            <button class="btn btn-primary" onclick="event.stopPropagation(); showVehicleDetails('${vehicle._id}')">
                                View Details
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        async function showVehicleDetails(vehicleId) {
            if (!currentUser) {
                showLogin();
                return;
            }
            
            currentVehicleId = vehicleId;
            
            try {
                const response = await fetch(`${API_URL}/vehicles/${vehicleId}`);
                const vehicle = await response.json();
                
                const isSeller = currentUser && vehicle.sellerId._id === currentUser.id;
                
                const modalBody = document.getElementById('modalBody');
                modalBody.innerHTML = `
                    <img src="${API_URL.replace('/api', '')}${vehicle.image}" alt="${vehicle.brand} ${vehicle.model}" style="width: 100%; height: 400px; object-fit: cover; border-radius: 10px; margin-bottom: 2rem;" onerror="this.src='https://via.placeholder.com/800x400?text=No+Image'">
                    
                    <div class="vehicle-detail-grid">
                        <div class="detail-item">
                            <label>Brand</label>
                            <p>${vehicle.brand}</p>
                        </div>
                        <div class="detail-item">
                            <label>Model</label>
                            <p>${vehicle.model}</p>
                        </div>
                        <div class="detail-item">
                            <label>Year</label>
                            <p>${vehicle.year}</p>
                        </div>
                        <div class="detail-item">
                            <label>Type</label>
                            <p>${vehicle.type}</p>
                        </div>
                        <div class="detail-item">
                            <label>Condition</label>
                            <p>${vehicle.condition}</p>
                        </div>
                        <div class="detail-item">
                            <label>Mileage</label>
                            <p>${vehicle.mileage.toLocaleString()} miles</p>
                        </div>
                        <div class="detail-item">
                            <label>Starting Price</label>
                            <p style="color: var(--primary); font-size: 1.3rem;">${vehicle.price.toLocaleString()}</p>
                        </div>
                        <div class="detail-item">
                            <label>Status</label>
                            <p style="color: ${vehicle.status === 'available' ? 'var(--secondary)' : 'var(--danger)'}; text-transform: capitalize;">${vehicle.status}</p>
                        </div>
                    </div>
                    
                    ${vehicle.description ? `
                        <div style="margin: 2rem 0;">
                            <h3 style="margin-bottom: 0.5rem;">Description</h3>
                            <p style="color: var(--text-light); line-height: 1.8;">${vehicle.description}</p>
                        </div>
                    ` : ''}
                    
                    <div style="background: var(--light); padding: 1.5rem; border-radius: 10px; margin: 2rem 0;">
                        <h3 style="margin-bottom: 1rem;">Contact Information</h3>
                        <p><strong>Name:</strong> ${vehicle.contactName}</p>
                        <p><strong>Phone:</strong> ${vehicle.contactPhone}</p>
                    </div>
                    
                    ${vehicle.status === 'available' ? `
                        <div class="bid-section">
                            <h3><i class="fas fa-gavel"></i> Place Your Bid</h3>
                            ${!isSeller ? `
                                <form class="bid-form" onsubmit="placeBid(event, '${vehicleId}')">
                                    <input type="number" id="bidAmount" placeholder="Enter bid amount" min="${vehicle.price + 1}" required>
                                    <button type="submit" class="btn btn-secondary">
                                        <i class="fas fa-gavel"></i> Place Bid
                                    </button>
                                </form>
                            ` : `
                                <p style="background: rgba(255,255,255,0.1); padding: 1rem; border-radius: 8px; margin-bottom: 1rem;">
                                    <i class="fas fa-info-circle"></i> You cannot bid on your own vehicle
                                </p>
                            `}
                            
                            <h4 style="margin-top: 1.5rem; margin-bottom: 1rem;">Current Bids</h4>
                            <div class="bid-list" id="bidList">
                                <div class="spinner"></div>
                            </div>
                            
                            ${isSeller ? `
                                <button class="btn btn-success" onclick="confirmBooking('${vehicleId}')" style="width: 100%; margin-top: 1rem;">
                                    <i class="fas fa-check-circle"></i> Confirm Sale to Highest Bidder
                                </button>
                            ` : ''}
                        </div>
                    ` : `
                        <div style="background: var(--danger); color: white; padding: 1.5rem; border-radius: 10px; text-align: center;">
                            <i class="fas fa-times-circle" style="font-size: 3rem; margin-bottom: 1rem;"></i>
                            <h3>This vehicle has been sold</h3>
                        </div>
                    `}
                `;
                
                document.getElementById('modalTitle').textContent = `${vehicle.brand} ${vehicle.model}`;
                document.getElementById('vehicleModal').style.display = 'block';
                
                if (vehicle.status === 'available') {
                    loadVehicleBids(vehicleId);
                }
            } catch (error) {
                console.error('Error loading vehicle details:', error);
            }
        }

        async function loadVehicleBids(vehicleId) {
            try {
                const response = await fetch(`${API_URL}/vehicles/${vehicleId}/bids`);
                const bids = await response.json();
                
                const bidList = document.getElementById('bidList');
                
                if (bids.length === 0) {
                    bidList.innerHTML = '<p style="text-align: center; color: rgba(255,255,255,0.7);">No bids yet. Be the first to bid!</p>';
                    return;
                }
                
                bidList.innerHTML = bids.map((bid, index) => `
                    <div class="bid-item ${index === 0 ? 'highest-bid' : ''}">
                        <div>
                            <strong>${bid.userId.name}</strong>
                            ${index === 0 ? '<span style="background: var(--secondary); padding: 0.2rem 0.5rem; border-radius: 5px; font-size: 0.8rem; margin-left: 0.5rem;">Highest Bid</span>' : ''}
                        </div>
                        <div style="font-size: 1.2rem; font-weight: 700;">${bid.amount.toLocaleString()}</div>
                    </div>
                `).join('');
            } catch (error) {
                console.error('Error loading bids:', error);
            }
        }

        async function placeBid(e, vehicleId) {
            e.preventDefault();
            
            const amount = document.getElementById('bidAmount').value;
            const token = localStorage.getItem('token');
            
            try {
                const response = await fetch(`${API_URL}/bids`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({ vehicleId, amount })
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    document.getElementById('bidAmount').value = '';
                    loadVehicleBids(vehicleId);
                    alert('Bid placed successfully!');
                } else {
                    alert(data.message);
                }
            } catch (error) {
                alert('Failed to place bid. Please try again.');
            }
        }

        async function confirmBooking(vehicleId) {
            if (!confirm('Confirm sale to the highest bidder?')) {
                return;
            }
            
            const token = localStorage.getItem('token');
            
            try {
                const response = await fetch(`${API_URL}/bookings`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({ vehicleId })
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    alert('Booking confirmed! The buyer will be notified.');
                    closeModal();
                    loadVehicles();
                } else {
                    alert(data.message);
                }
            } catch (error) {
                alert('Failed to confirm booking. Please try again.');
            }
        }

        async function handleSellVehicle(e) {
            e.preventDefault();
            
            if (!currentUser) {
                showLogin();
                return;
            }
            
            const formData = new FormData();
            formData.append('brand', document.getElementById('sellBrand').value);
            formData.append('model', document.getElementById('sellModel').value);
            formData.append('year', document.getElementById('sellYear').value);
            formData.append('price', document.getElementById('sellPrice').value);
            formData.append('type', document.getElementById('sellType').value);
            formData.append('condition', document.getElementById('sellCondition').value);
            formData.append('mileage', document.getElementById('sellMileage').value);
            formData.append('description', document.getElementById('sellDescription').value);
            formData.append('contactName', document.getElementById('sellContactName').value);
            formData.append('contactPhone', document.getElementById('sellContactPhone').value);
            formData.append('image', document.getElementById('sellImage').files[0]);
            
            const token = localStorage.getItem('token');
            
            try {
                const response = await fetch(`${API_URL}/vehicles`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    },
                    body: formData
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    showSuccess('sellSuccess', 'Vehicle listed successfully!');
                    document.getElementById('sellVehicleForm').reset();
                    setTimeout(() => showHome(), 2000);
                } else {
                    showError('sellError', data.message);
                }
            } catch (error) {
                showError('sellError', 'Failed to list vehicle. Please try again.');
            }
        }

        function handleSearch(e) {
            e.preventDefault();
            
            const filters = {
                brand: document.getElementById('searchBrand').value,
                type: document.getElementById('searchType').value,
                minPrice: document.getElementById('searchMinPrice').value,
                maxPrice: document.getElementById('searchMaxPrice').value,
                minYear: document.getElementById('searchMinYear').value
            };
            
            // Remove empty filters
            Object.keys(filters).forEach(key => {
                if (!filters[key]) delete filters[key];
            });
            
            loadVehicles(filters);
        }

        // Dashboard
        async function loadDashboard() {
            if (!currentUser) {
                showLogin();
                return;
            }
            
            const token = localStorage.getItem('token');
            
            try {
                // Load user vehicles
                const vehiclesRes = await fetch(`${API_URL}/user/vehicles`, {
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                const vehicles = await vehiclesRes.json();
                
                // Load user bids
                const bidsRes = await fetch(`${API_URL}/user/bids`, {
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                const bids = await bidsRes.json();
                
                // Load user bookings
                const bookingsRes = await fetch(`${API_URL}/user/bookings`, {
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                const bookings = await bookingsRes.json();
                
                // Update stats
                document.getElementById('statVehicles').textContent = vehicles.length;
                document.getElementById('statBids').textContent = bids.length;
                document.getElementById('statBookings').textContent = bookings.length;
                
                // Display vehicles
                const vehicleGrid = document.getElementById('dashVehicleGrid');
                if (vehicles.length === 0) {
                    vehicleGrid.innerHTML = '<p style="text-align: center; grid-column: 1 / -1; color: var(--text-light);">No vehicles posted yet</p>';
                } else {
                    vehicleGrid.innerHTML = vehicles.map(vehicle => `
                        <div class="vehicle-card">
                            <div class="vehicle-image-container">
                                <img src="${API_URL.replace('/api', '')}${vehicle.image}" alt="${vehicle.brand} ${vehicle.model}" class="vehicle-image" onerror="this.src='https://via.placeholder.com/400x300?text=No+Image'">
                                <div class="vehicle-badge" style="background: ${vehicle.status === 'available' ? 'var(--secondary)' : 'var(--danger)'}">${vehicle.status}</div>
                            </div>
                            <div class="vehicle-info">
                                <h3 class="vehicle-title">${vehicle.brand} ${vehicle.model}</h3>
                                <div class="vehicle-price">${vehicle.price.toLocaleString()}</div>
                                <div class="vehicle-details">
                                    <div class="vehicle-detail">
                                        <i class="fas fa-calendar"></i>
                                        <span>${vehicle.year}</span>
                                    </div>
                                    <div class="vehicle-detail">
                                        <i class="fas fa-car"></i>
                                        <span>${vehicle.type}</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `).join('');
                }
                
                // Display bids
                const bidsGrid = document.getElementById('dashBidsGrid');
                if (bids.length === 0) {
                    bidsGrid.innerHTML = '<p style="text-align: center; grid-column: 1 / -1; color: var(--text-light);">No bids placed yet</p>';
                } else {
                    bidsGrid.innerHTML = bids.map(bid => `
                        <div class="vehicle-card">
                            <div class="vehicle-image-container">
                                <img src="${API_URL.replace('/api', '')}${bid.vehicleId.image}" alt="${bid.vehicleId.brand} ${bid.vehicleId.model}" class="vehicle-image" onerror="this.src='https://via.placeholder.com/400x300?text=No+Image'">
                                <div class="vehicle-badge" style="background: ${bid.status === 'pending' ? 'var(--warning)' : bid.status === 'accepted' ? 'var(--secondary)' : 'var(--danger)'}">${bid.status}</div>
                            </div>
                            <div class="vehicle-info">
                                <h3 class="vehicle-title">${bid.vehicleId.brand} ${bid.vehicleId.model}</h3>
                                <div class="vehicle-price">Your Bid: ${bid.amount.toLocaleString()}</div>
                                <div class="vehicle-details">
                                    <div class="vehicle-detail">
                                        <i class="fas fa-calendar"></i>
                                        <span>${bid.vehicleId.year}</span>
                                    </div>
                                    <div class="vehicle-detail">
                                        <i class="fas fa-tag"></i>
                                        <span>Original: ${bid.vehicleId.price.toLocaleString()}</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `).join('');
                }
                
                // Display bookings
                const bookingsGrid = document.getElementById('dashBookingsGrid');
                if (bookings.length === 0) {
                    bookingsGrid.innerHTML = '<p style="text-align: center; grid-column: 1 / -1; color: var(--text-light);">No bookings yet</p>';
                } else {
                    bookingsGrid.innerHTML = bookings.map(booking => {
                        const isBuyer = booking.buyerId._id === currentUser.id;
                        return `
                            <div class="vehicle-card">
                                <div class="vehicle-image-container">
                                    <img src="${API_URL.replace('/api', '')}${booking.vehicleId.image}" alt="${booking.vehicleId.brand} ${booking.vehicleId.model}" class="vehicle-image" onerror="this.src='https://via.placeholder.com/400x300?text=No+Image'">
                                    <div class="vehicle-badge" style="background: var(--secondary)">Confirmed</div>
                                </div>
                                <div class="vehicle-info">
                                    <h3 class="vehicle-title">${booking.vehicleId.brand} ${booking.vehicleId.model}</h3>
                                    <div class="vehicle-price">${booking.finalPrice.toLocaleString()}</div>
                                    <div style="background: var(--light); padding: 1rem; border-radius: 8px; margin-top: 1rem;">
                                        <p><strong>${isBuyer ? 'Seller' : 'Buyer'}:</strong> ${isBuyer ? booking.sellerId.name : booking.buyerId.name}</p>
                                        <p><strong>Phone:</strong> ${isBuyer ? booking.sellerId.phone : booking.buyerId.phone}</p>
                                    </div>
                                </div>
                            </div>
                        `;
                    }).join('');
                }
            } catch (error) {
                console.error('Error loading dashboard:', error);
            }
        }

        // Utility Functions
        function showError(elementId, message) {
            const errorEl = document.getElementById(elementId);
            errorEl.textContent = message;
            errorEl.style.display = 'block';
            setTimeout(() => {
                errorEl.style.display = 'none';
            }, 5000);
        }

        function showSuccess(elementId, message) {
            const successEl = document.getElementById(elementId);
            successEl.textContent = message;
            successEl.style.display = 'block';
            setTimeout(() => {
                successEl.style.display = 'none';
            }, 5000);
        }

        function checkPasswordStrength() {
            const password = document.getElementById('regPassword').value;
            const strengthBar = document.getElementById('passwordStrengthBar');
            
            let strength = 0;
            if (password.length >= 8) strength++;
            if (password.match(/[a-z]/) && password.match(/[A-Z]/)) strength++;
            if (password.match(/[0-9]/)) strength++;
            if (password.match(/[^a-zA-Z0-9]/)) strength++;
            
            strengthBar.className = 'password-strength-bar';
            if (strength <= 1) {
                strengthBar.classList.add('strength-weak');
            } else if (strength <= 3) {
                strengthBar.classList.add('strength-medium');
            } else {
                strengthBar.classList.add('strength-strong');
            }
        }

        function closeModal() {
            document.getElementById('vehicleModal').style.display = 'none';
            currentVehicleId = null;
        }

        function toggleMenu() {
            document.getElementById('navLinks').classList.toggle('active');
        }

        function scrollToVehicles() {
            document.getElementById('vehiclesSection').scrollIntoView({ behavior: 'smooth' });
        }

        function switchTab(tab) {
            document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            event.target.classList.add('active');
            document.getElementById(`${tab}Tab`).classList.add('active');
        }

        // Navigation Functions
        function hideAllPages() {
            document.querySelectorAll('#mainContent > div').forEach(page => {
                page.classList.add('hidden');
            });
        }

        function showHome() {
            hideAllPages();
            document.getElementById('homePage').classList.remove('hidden');
            loadVehicles();
        }

        function showRegister() {
            hideAllPages();
            document.getElementById('registerPage').classList.remove('hidden');
        }

        function showLogin() {
            hideAllPages();
            document.getElementById('loginPage').classList.remove('hidden');
        }

        function showSellVehicle() {
            if (!currentUser) {
                showLogin();
                return;
            }
            hideAllPages();
            document.getElementById('sellVehiclePage').classList.remove('hidden');
        }

        function showDashboard() {
            if (!currentUser) {
                showLogin();
                return;
            }
            hideAllPages();
            document.getElementById('dashboardPage').classList.remove('hidden');
            loadDashboard();
        }

        function showAbout() {
            hideAllPages();
            document.getElementById('aboutPage').classList.remove('hidden');
        }

        function showContact() {
            hideAllPages();
            document.getElementById('contactPage').classList.remove('hidden');
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('vehicleModal');
            if (event.target === modal) {
                closeModal();
            }
        }